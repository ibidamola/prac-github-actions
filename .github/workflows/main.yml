# Name of the workflow
name: Node.js CI/CD pipeline

# Specifies when the workflow should be triggered
on:
  push:
    branches: 
    - main 
  pull_request:
    branches:
    - main 

# Add permissions with least privilege principle
permissions:
  contents: read
  packages: read

# Cache dependencies
# Defines the jobs that the workflow will execute
jobs:
  # Job identifier, can be any name (here it's 'build')
  build:
    # Specifies the type of virtual host environment (runner) to use
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18,20]
        include:
         
          - node-version: 18
            cache: 'npm'
          - node-version: 20
            cache: 'npm'
      

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v2

    # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

    # Step 3: Cache dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

    # Step 4: Create .env file
      - name: Create .env file
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_APP_NAME=${{ secrets.VITE_APP_NAME }}" >> .env

    # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

    # Step 5: Build the project
      - name: Build the projects
        run: npm run build

    # Step 6: Install testing dependencies
      - name: Install testing dependencies
        run: npm install --save-dev jsdom

    # Step 7: Run tests
      - name: Run tests
        run: npx vitest 


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      # Integrating Code Quality Check: Running ESLint to check code qualities
      - name: Run Linter
        run: npx eslint .

  # Add a dedicated security scan job
  security-scan:
    runs-on: ubuntu-latest
    needs: [build]  # Run after successful build
    
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit
          # You could also integrate other security tools here
          # Example: npx snyk test (if you use Snyk)
          
      # Optional: Scan for secrets accidentally committed
      - name: Check for secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
